import argparse
import ast
import datetime
import json

time = datetime.datetime.now()
CUR_TIME = str(time.month) + '_' + str(time.day) + '_' + str(time.hour) + '_' + str(time.minute)


class Args:
	def __init__(self):
		self.parser = argparse.ArgumentParser(description='arguments')
		
		# ray tune
		self.parser.add_argument('--ray_tune', default=False, type=ast.literal_eval, help='whether use ray tune')
		
		# Device
		self.parser.add_argument('--cuda_device', default=0, type=int, help='which cuda device could be used.')
		
		# Current time
		self.parser.add_argument('--cur_time', default=CUR_TIME, type=str, help='current time contained month and day')
		# Dim of nets
		"""
		self.parser.add_argument('--resSize', type=int, default=1024, help='(1024) size of visual features')
		self.parser.add_argument('--hidSizeTSZ_1', type=int, default=2048,
		                         help='(2048) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--hidSizeTSZ_2', type=int, default=1704,
		                         help='(1536) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--hidSizeTSZ_3', type=int, default=1532,
		                         help='(1360) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--outSizeTS', type=int, default=1000,
		                         help='(1360) size if output dim for Teacher Net and Student Net')
		self.parser.add_argument('--hidSizeG', type=int, default=1704,
		                         help='(2048) size of hidden units in Generator Net')
		self.parser.add_argument('--in_dim_G', type=int, default=1000,
		                         help='(1000) size of word-embedding generated by "bert" ')
		self.parser.add_argument('--outSizeZ', type=int, default=360,
		                         help='(360) size of visual features in Z Net(for test unseen)')
		"""
		# Dim of nets
		self.parser.add_argument('--resSize', type=int, default=2048, help='(1024) size of visual features')
		self.parser.add_argument('--hidSizeTSZ_1', type=int, default=1024,
		                         help='(2048) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--hidSizeTSZ_2', type=int, default=512,
		                         help='(1536) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--hidSizeTSZ_3', type=int, default=256,
		                         help='(1360) size of hidden units in Teacher Net,Student Net and Z Net(for test unseen)')
		self.parser.add_argument('--outSizeTS', type=int, default=20,
		                         help='(1360) size if output dim for Teacher Net and Student Net;20 for apy')
		self.parser.add_argument('--hidSizeG', type=int, default=4096,
		                         help='(2048) size of hidden units in Generator Net')
		self.parser.add_argument('--in_dim_G', type=int, default=768,
		                         help='(1000) size of word-embedding generated by "bert" ')
		self.parser.add_argument('--outSizeZ', type=int, default=12,
		                         help='(360) size of visual features in Z Net(for test unseen);12 for apy')
		
		# Files root
		self.parser.add_argument('--dataRoot', default='../data', help=' path to save row data')
		# CUB:200/150/50 SUN:717/645/72
		self.parser.add_argument('--dataset', default='APY', help='dataset name (AWA1,AWA2,SUN,CUB,APY,FLO,ImNet2)')
		self.parser.add_argument('--all_dataset_names', type=list, default=['AWA1', 'AWA2', 'APY'],
		                         help='The dataset name which store in excel table')
		self.parser.add_argument('--checkPointRoot', default='../checkpoints', help=' path to save the trained model')
		self.parser.add_argument('--resultsRoot', default='../results/supplementary',
		                         help='path to save the experiment results')
		self.parser.add_argument('--result_xlsx_path', default='../results/supplementary/results.xlsx',
		                         help=' path to save the experiment results')
		self.parser.add_argument('--sorted_excelRoot', default='../results/supplementary/sorted_result.xlsx',
		                         help=' path to save the experiment results')
		self.parser.add_argument('--graph_filepath', default='../graph', help='path to save graph')
		self.parser.add_argument('--line_graph_filepath', default='../graph/Line_Graph', help='path to save line graph')
		self.parser.add_argument('--tsne_graph_filepath', default='../graph/TSNE', help='path to save line graph')
		
		# Batch
		self.parser.add_argument('--batchTS', type=int, default=120, help=' The batch size for training Teacher net')
		self.parser.add_argument('--batch_size', type=int, default=120, help=' The batch size for training Teacher net')
		
		# Lr
		self.parser.add_argument('--lrT', type=float, default=1e-5, help=' learning rate for training Teacher net')
		self.parser.add_argument('--lrG', type=float, default=1e-5, help=' learning rate for training Generator net')
		self.parser.add_argument('--lrS', type=float, default=1e-5, help=' learning rate for training Student net')
		self.parser.add_argument('--lrZ', type=float, default=1e-5, help=' learning rate for Classifier  (Z net) ')
		
		# New loss for generator
		self.parser.add_argument('--loss_type', type=str, default='kl_loss',
		                         choices=['normal_loss', 'kl_loss', 'mmd_loss', 'rmmd_loss', 'ct_loss'],
		                         help='which kind of loss used in generator')
		self.parser.add_argument('--get_center', type=ast.literal_eval, default=True,
		                         help='collect hidden layer for calculation of center loss')
		self.parser.add_argument('--new_loss_weight', type=float, default=10, help='The weight for new loss')
		self.parser.add_argument('--lr_cent', type=float, default=1e-5, help='The lr for center loss')
		
		# Weight decay
		self.parser.add_argument('--t_weight_decay', type=float, default=1e-4, help='weight decay for learning rate')
		self.parser.add_argument('--g_weight_decay', type=float, default=1e-4, help='weight decay for learning rate')
		self.parser.add_argument('--s_weight_decay', type=float, default=1e-4, help='weight decay for learning rate')
		self.parser.add_argument('--z_weight_decay', type=float, default=1e-4, help='weight decay for learning rate')
		
		# Drop out rate
		self.parser.add_argument('--drop_p', type=float, default=0.4, help='p value for drop out layer')
		
		# The setting of synthetic samples; use_att_or_we
		self.parser.add_argument('--semantic_type', default='bert', choices=['bert', 'att', 'p_noises', 'wv'],
		                         help=' Use bert to generate word-embedding or use attributes provided by AWA dataset')
		self.parser.add_argument('--noise_type', default='extremum_dis',
		                         choices=['extremum_dis', 'evenly_dis', 'standard_normal_dis'])
		self.parser.add_argument('--n_samples', type=int, default=400,
		                         help='The number of synthetic samples generated from each class by using bert or '
		                              'attributes')
		self.parser.add_argument('--n_z_samples', type=int, default=600,
		                         help='The number of synthetic samples generated from each class by using bert or '
		                              'attributes')
		self.parser.add_argument('--noiseLen', type=int, default=20,
		                         help=' The noise length: AWA1:100, APY:20')
		self.parser.add_argument('--val_split', type=float, default=0.2, help='split for validation')
		
		# Epoch
		self.parser.add_argument('--epochT', type=int, default=200, help='number of epoch to train Teacher Net')
		self.parser.add_argument('--epochG', type=int, default=30, help='number of epoch to train Generator Net')
		self.parser.add_argument('--epochS', type=int, default=80, help='number of epoch to train Student Net')
		self.parser.add_argument('--epochZ', type=int, default=20, help='number of epoch to train Z Net')
		
		# Epoch for student network in black_box scenerio
		self.parser.add_argument('--epochS1', type=int, default=40, help='number of epoch to train Student Net')
		self.parser.add_argument('--epochS2', type=int, default=50, help='number of epoch to train Student Net')
		self.parser.add_argument('--bn_samples', type=int, default=10000,
		                         help='the number of synthetic samples for student in the second round training')
		
		# Setting
		self.parser.add_argument('--framework', type=str, default='white_box', choices=['white_box', 'black_box'])
		self.parser.add_argument('--task_categories', type=str, default='AZSL', choices=['GZSL_all', 'AZSL'],
		                         help='')
		self.parser.add_argument('--att_tc', type=str, default='gzsl', choices=['gzsl', 'zsl_seen', 'zsl_unseen'],
		                         help='generate which classes seen/unseen in G/S/Z?')
		self.parser.add_argument('--AZSL_test', type=str, default='zsl', choices=['gzsl', 'zsl'],
		                         help='gzsl:50cls zsl:10cls')
		
		# Train or test
		self.parser.add_argument('--train', default=True, type=ast.literal_eval, help='train')
		self.parser.add_argument('--test', default=True, type=ast.literal_eval, help='test')
		self.parser.add_argument('--need_quality_check', default='quality', type=str,
		                         choices=['quality', 'no_quality'],
		                         help='whether need quality check or just test generator accuracy')
		self.parser.add_argument('--trainTeacherNet', default=True, type=ast.literal_eval,
		                         help='To train teacher net now or read the pretrain teacher model')
		self.parser.add_argument('--trainGeneratorNet', default=True, type=ast.literal_eval,
		                         help='To train Generator net now or read the pretrain Generator model')
		self.parser.add_argument('--trainStudentNet', default=True, type=ast.literal_eval,
		                         help='To train the Student net now or read the pretrain Student model')
		self.parser.add_argument('--trainZNet', default=True, type=ast.literal_eval,
		                         help='To train the Z net now or read the pretrain Student model')
		
		# Save experiment results
		self.parser.add_argument('--save_result_in_excel', default=False, type=ast.literal_eval,
		                         help='whether save experiment result into excel')
		self.parser.add_argument('--column_names', type=list,
		                         default=['Time', 'Duration', 'Framework', 'Task_categories', 'AZSL_test', 'Dataset',
		                                  'Teacher_acc', 'Generator_acc', 'Quality_check_acc', 'Student_acc(fake_data)',
		                                  'Student_acc(real_data)', 'Acc_unseen', 'Acc_seen', 'H', 'Training_details'])
		self.parser.add_argument('--prompt_info', type=list,
		                         default=["Time", "Teacher_acc", "Acc_seen", "Acc_unseen", 'H', 'Training_details'],
		                         help='print prompt information when saving model')
		
		# Check experiment results
		self.parser.add_argument('--check_result', default=False, type=ast.literal_eval,
		                         help='Whether to check the results of the experiment')
		self.parser.add_argument('--sorted_by', type=list,
		                         default=['Dataset', 'Framework', 'Task_categories', 'AZSL_test', 'H', 'Acc_unseen'],
		                         nargs='+',
		                         help='Pass in the name of the column to be sorted, and then sort the entire table')
		self.parser.add_argument('--Ascending', default=False, type=ast.literal_eval,
		                         help='Is it ascending or descending?')
		
		# query condition
		self.parser.add_argument('--query_type', default='sort_all_dataset', type=str,
		                         choices=['top_all_dataset', 'sort_all_dataset', 'query_one_dataset'])
		self.parser.add_argument('--check_top_num', default=5, type=int, help='Top ? results')
		self.parser.add_argument('--q_fw', type=str, default='white_box', choices=['white_box', 'black_box'])
		self.parser.add_argument('--q_task_cg', type=str, default='AZSL', choices=['GZSL_all', 'AZSL'],
		                         help='')
		self.parser.add_argument('--q_AZSL_test', type=str, default='gzsl', choices=['gzsl', 'zsl'],
		                         help='gzsl:50cls zsl:10cls')
		self.parser.add_argument('--query_keywords', default={"keyword": "Dataset", "filter_by": "AWA1"},
		                         type=json.loads, help='')
		
		# Move the best model
		self.parser.add_argument('--save_best_model', default=False, type=ast.literal_eval,
		                         help='Save best model based on historical records')
		
		# Save data to draw Line Graph
		self.parser.add_argument('--save_lgd', default=False, type=ast.literal_eval,
		                         help='Whether save data to draw line graph')
		
		# TSNE
		self.parser.add_argument('--do_tsne', default=False, type=ast.literal_eval, help='Whether do tsne experiment')
		self.parser.add_argument('--tsne_data', default='test', type=str, choices=['train', 'test'])
		self.parser.add_argument('--tsne_lr', default=100, type=int, help='Whether do tsne experiment')
		self.parser.add_argument('--tsne_n_iter', default=5000, type=int, help='Whether do tsne experiment')
		self.parser.add_argument('--tsne_cls_num', default=12, type=int, help='')
		self.parser.add_argument('--cls_samples_num', default=80, type=int, help='')
		self.parser.add_argument('--perplexity', default=50, type=int, help='')
		self.parser.add_argument('--exaggeration', default=1.5, help='')
		
		# Differentially PrivacyEngine
		self.parser.add_argument(
			"--disable-dp",
			action="store_true",
			default=True,
			help="Disable privacy training and just train with vanilla SGD",
		)
		
		self.parser.add_argument(
        		"--sigma",
       			type=float,
        		default=1.0,
        		metavar="S",
        		help="Noise multiplier (default 1.0)",)
		
		self.parser.add_argument("-c", "--max-per-sample-grad_norm", type=float, default=1.0, metavar="C", help="Clip per-sample gradients to this norm (default 1.0)")
		self.parser.add_argument('--epslion', type=float, default=50.0)
		self.parser.add_argument('--delta', type=float, default=1e-5)
	
	def parse(self):
		args = self.parser.parse_args()
		return args
